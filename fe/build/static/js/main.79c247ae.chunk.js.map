{"version":3,"sources":["store.js","utils/spotifySingleton.js","components/SongRow/index.js","components/Body/index.js","views/Login/index.js","components/Header/index.js","components/SidebarOption.js/index.js","components/Searchbar/index.js","components/Sidebar/index.js","components/Footer/index.js","views/Search/index.js","App.js","serviceWorker.js","contexts/DataLayer.js","index.js"],"names":["initialState","current_playlist","currently_playing","spotify","is_playing","index","search_data","is_loading","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","dispatch","value","this","audio","Audio","track","SpotifyInstance","instance","src","preview_url","play","pause","vol","volume","Object","freeze","SongRow","trackParams","globalState","useContext","Grid","container","spacing","className","alignItems","direction","item","xs","IconButton","onClick","album","images","url","alt","name","artists","map","artist","join","release_date","millis","minutes","Math","floor","seconds","toFixed","millisToMinutesAndSeconds","duration_ms","Body","fontSize","tracks","items","i","playSong","key","justify","CircularProgress","Login","href","Header","user","display_name","SidebarOption","title","Icon","getPlaylist","id","Searchbar","useState","input","setInput","history","useHistory","e","a","preventDefault","axios","get","data","push","console","log","onSubmit","placeholder","onChange","target","Sidebar","playlists","params","then","res","to","playlist","Footer","React","setValue","playPause","playFirstSong","firstSong","md","aria-label","window","location","indexOf","Slider","event","newValue","setVolume","aria-labelledby","Search","App","useCookies","cookies","authorized","setAuthorized","setUser","setPlaylists","useEffect","access_token","refresh_token","post","initialData","checkAuth","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79c247ae.chunk.js","sourcesContent":["// store.js\r\nimport React, { createContext, useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  current_playlist: [],\r\n  currently_playing: null,\r\n  spotify: null,\r\n  is_playing: false,\r\n  index: null,\r\n  search_data:[],\r\n  is_loading: false\r\n};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case \"SET_CURRENT_PLAYLIST\":\r\n        return {\r\n          ...state,\r\n          current_playlist: action.current_playlist\r\n        };\r\n      case \"SET_CURRENTLY_PLAYING\":\r\n        return {\r\n          ...state,\r\n          currently_playing: action.currently_playing\r\n        };\r\n      case \"SET_SPOTIFY\":\r\n        return {\r\n          ...state,\r\n          spotify: action.spotify\r\n        };\r\n      case \"SET_IS_PLAYING\":\r\n        return {\r\n          ...state,\r\n          is_playing: action.is_playing\r\n        };\r\n      case \"SET_CURRENT_INDEX\":\r\n        return {\r\n          ...state,\r\n          index: action.index\r\n        };\r\n\r\n      case \"SET_SEARCH_DATA\":\r\n        return {\r\n          ...state,\r\n          search_data: action.search_data\r\n        };\r\n\r\n        case \"SET_IS_LOADING\":\r\n          return {\r\n            ...state,\r\n            is_loading: action.is_loading\r\n          };\r\n      default:\r\n        return state;\r\n    }\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider };\r\n","class SpotifyInstance {\r\n  constructor() {\r\n    this.audio = new Audio();\r\n    this.track = null;\r\n    if (SpotifyInstance.instance == null) {\r\n      SpotifyInstance.instance = this;\r\n    }\r\n    return SpotifyInstance.instance;\r\n  }\r\n\r\n  play(track) {\r\n    this.audio.src = track.preview_url;\r\n    this.audio.play();\r\n    this.audio[\"is_playing\"] = true;\r\n  }\r\n\r\n  pause() {\r\n    this.audio.pause();\r\n    this.audio[\"is_playing\"] = false;\r\n  }\r\n\r\n  setVolume(vol) {\r\n    this.audio.volume = vol / 100;\r\n  }\r\n}\r\n\r\nconst spotify = new SpotifyInstance();\r\nObject.freeze(spotify);\r\nexport default spotify;\r\n","import React, { useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport { store } from \"../../store.js\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport spotify from \"../../utils/spotifySingleton\";\r\n\r\nfunction SongRow({ track, index }) {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n\r\n  const play = (trackParams) => {\r\n    spotify.play(trackParams);\r\n\r\n    // Dispatch currently playings for other components to consume & to update ui.\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: true\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENTLY_PLAYING\",\r\n      currently_playing: trackParams,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: index,\r\n    });\r\n  };\r\n\r\n  const pause = () => {\r\n    spotify.pause();\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: false\r\n    });\r\n  };\r\n\r\n  const millisToMinutesAndSeconds = (millis) => {\r\n    var minutes = Math.floor(millis / 60000);\r\n    var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n  };\r\n\r\n  const playButton = (trackParams) => {\r\n    if (globalState.state.is_playing === true && trackParams?.preview_url === spotify.audio.src) {\r\n      return (\r\n        <IconButton onClick={() => pause()}>\r\n          <PauseIcon />\r\n        </IconButton>\r\n      );\r\n    } else if (\r\n      globalState.state.is_playing === false &&\r\n      trackParams?.preview_url !== spotify.audio.src\r\n    ) {\r\n      return (\r\n        <IconButton onClick={() => play(trackParams)}>\r\n          <PlayArrowIcon />\r\n        </IconButton>\r\n      );\r\n    } else {\r\n      return (\r\n        <IconButton onClick={() => play(trackParams)}>\r\n          <PlayArrowIcon />\r\n        </IconButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={1}\r\n      className=\"songRow\"\r\n      alignItems=\"center\"\r\n      direction=\"row\"\r\n    >\r\n      <Grid item xs={4}>\r\n      <Grid container direction=\"row\">\r\n        {playButton(track)}\r\n        <img\r\n          className=\"songRow__album\"\r\n          src={track?.album.images[0].url}\r\n          alt=\"\"\r\n        />\r\n          <div className=\"songRow__info\">\r\n            <h1>{track?.name}</h1>\r\n            <p>{track?.artists.map((artist) => artist.name).join(\", \")} - </p>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        {track?.album.name}\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        {track?.album.release_date}\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        {millisToMinutesAndSeconds(track?.duration_ms)}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default SongRow;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport SongRow from \"../SongRow\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { store } from \"../../store.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction Body() {\r\n  const globalState = useContext(store);\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"body__info\">\r\n        <div className=\"body__infoText\">\r\n          <strong>PLAYLIST</strong>\r\n          <h2>{globalState.state.current_playlist?.name}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"body__songs\">\r\n        {globalState.state.is_loading === false ? (\r\n          <>\r\n            <div className=\"body__icons\">\r\n              <FavoriteIcon fontSize=\"large\" />\r\n              <MoreHorizIcon />\r\n            </div>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={4}>\r\n                Title\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                Artist\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                Release Date\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                Time\r\n              </Grid>\r\n            </Grid>\r\n            {globalState.state.current_playlist?.tracks?.items.map(\r\n              (item, i) => (\r\n                <SongRow track={item.track} playSong key={i} index={i} />\r\n              )\r\n            )}\r\n          </>\r\n        ) : (\r\n          <Grid container justify=\"center\">\r\n            <CircularProgress />\r\n          </Grid>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img\r\n          src=\"https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_White.png\"\r\n          alt=\"logo\"\r\n        />\r\n        {/* // Spotify Logo\r\n            \r\n            // Login Button */}\r\n        <a href=\"/login\">Login with Spotify</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Header({ user }) {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__right\">\r\n        <h4>{user?.display_name}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction SidebarOption({ title, Icon, getPlaylist, id }){\r\n    return (    \r\n    <div className=\"sidebarOption\">\r\n        {Icon && <Icon className=\"sidebarOption__icon\" />}\r\n        {title &&  <button type=\"button\" onClick={() => getPlaylist(id)}><h4>{title}</h4></button> }\r\n    </div>)\r\n\r\n}\r\n\r\nexport default SidebarOption;","import React, { useState, useContext } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./index.css\";\r\nimport { store } from \"../../store.js\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Searchbar() {\r\n  const globalStore = useContext(store);\r\n  const { dispatch } = globalStore;\r\n  const [input, setInput] = useState(() => \"\");\r\n  const history = useHistory();\r\n\r\n  async function searchSpotify(e) {\r\n    try {\r\n      e.preventDefault();\r\n      const data = await axios.get(`/spotify/search?q=${input}`);\r\n\r\n      dispatch({\r\n        type: \"SET_SEARCH_DATA\",\r\n        search_data: data,\r\n      });\r\n\r\n      history.push(\"/search\");\r\n    } catch (err) {\r\n      console.log(\"err\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={searchSpotify} className=\"searchBar\">\r\n      <SearchIcon />\r\n      <input\r\n        className=\"input-with-icon-adornment\"\r\n        placeholder=\"Search by track or name\"\r\n        onChange={(e) => setInput(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React, { useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport SidebarOption from \"../SidebarOption.js\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport axios from \"axios\";\r\nimport { store } from \"../../store.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Searchbar from \"../../components/Searchbar\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Sidebar({ playlists }) {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n  const history = useHistory();\r\n  const getPlaylist = (id) => {\r\n    history.push(\"/\");\r\n    \r\n    dispatch({\r\n      type: \"SET_IS_LOADING\",\r\n      is_loading: true\r\n    });\r\n\r\n    axios.get(\"/spotify/get_playlist\", {\r\n      params: {\r\n        id\r\n      }\r\n    }).then((res) => {\r\n\r\n      dispatch({\r\n        type: \"SET_CURRENT_PLAYLIST\",\r\n        current_playlist: res.data\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_IS_LOADING\",\r\n        is_loading: false\r\n      });\r\n\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <img\r\n        src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n        alt=\"logo\"\r\n        className=\"sidebar__logo\"\r\n      />\r\n      <div className=\"sidebar__top\">\r\n        <Link to=\"/\">\r\n          <HomeIcon />\r\n          <h4>Home</h4>\r\n        </Link>\r\n        <Searchbar />\r\n        <button type=\"button\">\r\n          <LibraryMusicIcon />\r\n          <h4>Your Library</h4>\r\n        </button>\r\n      </div>\r\n      <strong className=\"sidebar__title\">Playlists</strong>\r\n      <hr />\r\n      {playlists?.items &&\r\n        playlists.items.map((playlist) => {\r\n          return (\r\n            <SidebarOption\r\n              title={playlist.name}\r\n              key={playlist.name}\r\n              getPlaylist={getPlaylist}\r\n              id={playlist.id}\r\n            />\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, {useContext} from \"react\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport VolumeDown from \"@material-ui/icons/VolumeDown\";\r\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\r\nimport { store } from \"../../store.js\";\r\nimport \"./index.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport spotify from \"../../utils/spotifySingleton\";\r\n\r\nfunction Footer() {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n\r\n  const [value, setValue] = React.useState(100);\r\n  const handleChange = (event, newValue) => {\r\n    spotify.setVolume(newValue);\r\n    setValue(newValue);\r\n  };\r\n\r\n  const skipNext = () => {\r\n    if (window.location.href.indexOf(\"search\") > -1) {\r\n      spotify.play(globalState.state.search_data.data.tracks[globalState.state.index + 1]);\r\n    }else{\r\n      if (globalState.state.index === null) {\r\n        playFirstSong();\r\n      } else {\r\n        spotify.play(\r\n          globalState.state.current_playlist.tracks.items[\r\n            globalState.state.index + 1\r\n          ].track\r\n        );\r\n  \r\n        dispatch({\r\n          type: \"SET_CURRENTLY_PLAYING\",\r\n          currently_playing:\r\n            globalState.state.current_playlist.tracks.items[\r\n              globalState.state.index + 1\r\n            ].track,\r\n        });\r\n      }\r\n    }\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: globalState.state.index + 1,\r\n    });\r\n\r\n  };\r\n\r\n  const skipPrevious = () => {\r\n\r\n    // Checks if page is search page, because playlists and search response have different formatting.\r\n    if (window.location.href.indexOf(\"search\") > -1) {\r\n      spotify.play(globalState.state.search_data.data.tracks[globalState.state.index - 1]);\r\n    }else{\r\n      if (globalState.state.index === null || globalState.state.index === 0) {\r\n        playFirstSong();\r\n      } else {\r\n        spotify.play(\r\n          globalState.state.current_playlist.tracks.items[\r\n            globalState.state.index - 1\r\n          ].track\r\n        );\r\n  \r\n        dispatch({\r\n          type: \"SET_CURRENTLY_PLAYING\",\r\n          currently_playing:\r\n            globalState.state.current_playlist.tracks.items[\r\n              globalState.state.index - 1\r\n            ].track,\r\n        });\r\n      }\r\n  \r\n      dispatch({\r\n        type: \"SET_IS_PLAYING\",\r\n        is_playing: true,\r\n      });\r\n    }\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: globalState.state.index - 1,\r\n    });\r\n  };\r\n\r\n  const playPause = () => {\r\n    if (globalState.state.currently_playing === null) {\r\n      playFirstSong();\r\n    } else if (\r\n      globalState.state?.is_playing === false &&\r\n      globalState.state?.currently_playing\r\n    ) {\r\n      spotify.audio.play();\r\n      dispatch({\r\n        type: \"SET_IS_PLAYING\",\r\n        is_playing: true,\r\n      });\r\n    } else {\r\n      spotify.audio.pause();\r\n      dispatch({\r\n        type: \"SET_IS_PLAYING\",\r\n        is_playing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const playButton = () => {\r\n    if (globalState.state.is_playing === true) {\r\n      return (\r\n        <IconButton aria-label=\"pause\" onClick={playPause}>\r\n          <PauseIcon />\r\n        </IconButton>\r\n      );\r\n    } else {\r\n      return (\r\n        <IconButton aria-label=\"play\" onClick={playPause}>\r\n          <PlayCircleOutlineIcon />\r\n        </IconButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  // Plays first in playlist if no song is already available\r\n  const playFirstSong = () => {\r\n    const firstSong = globalState.state.current_playlist.tracks.items[0].track;\r\n    spotify.play(firstSong);\r\n\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: true,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENTLY_PLAYING\",\r\n      currently_playing: firstSong,\r\n    });\r\n\r\n    // If first song is chosen, set index to 0 and set to keep track for prev & next functions.\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={3}>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            <img\r\n              className=\"footer__album\"\r\n              src={globalState.state.currently_playing?.album?.images[0].url}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"songRow__info\">\r\n              <h6>{globalState.state.currently_playing?.name}</h6>\r\n              <div>\r\n                <p>\r\n                  {globalState.state.currently_playing?.artists\r\n                    .map((artist) => artist?.name)\r\n                    .join(\", \")}{\" \"}\r\n                  -{\" \"}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Grid container direction=\"row\" justify=\"center\">\r\n            <IconButton aria-label=\"previous\" onClick={skipPrevious}>\r\n              <SkipPreviousIcon />\r\n            </IconButton>\r\n            {playButton()}\r\n            <IconButton aria-label=\"next\" onClick={skipNext}>\r\n              <SkipNextIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} md={3}>\r\n          <Grid container spacing={1} className=\"footer__sliderContainer\">\r\n            <Grid item>\r\n              <VolumeDown />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Slider\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-labelledby=\"continuous-slider\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <VolumeUp />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport axios from \"axios\";\r\nimport { store } from \"../../store\";\r\nimport SongRow from \"../../components/SongRow\";\r\nimport \"./index.css\";\r\n\r\nfunction Search() {\r\n  const globalState = useContext(store);\r\n  return (\r\n    <div className=\"searchPage\">\r\n      <div className=\"searchPage__infoText\">\r\n        <h2>Search Results</h2>\r\n      </div>\r\n      {globalState.state.search_data?.data?.tracks ? (\r\n        <>\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Grid item xs={4}>\r\n              Title\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              Artist\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              Release Date\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              Time\r\n            </Grid>\r\n          </Grid>\r\n          <div>\r\n            {globalState.state.search_data?.data?.tracks.map((track, i) => (\r\n              <SongRow track={track} playSong key={i} index={i} />\r\n            ))}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div>There are no search results, please provide a search query.</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport Body from \"./components/Body\";\r\nimport \"./index.css\";\r\nimport Login from \"./views/Login\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Search from \"./views/Search\"\r\nimport axios from \"axios\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { store } from \"./store\";\r\n\r\nfunction App() {\r\n  const globalState = useContext(store);\r\n  const [cookies, setCookie, removeCookie] = useCookies([\r\n    \"refresh_token\",\r\n    \"access_token\",\r\n  ]);\r\n  const [authorized, setAuthorized] = useState(null);\r\n  const [user, setUser] = useState({});\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(() => globalState.state.currently_playing);\r\n  const { dispatch } = globalState;\r\n\r\n  useEffect(() => {\r\n\r\n    const checkAuth = async () => {\r\n      if (!cookies.access_token || !cookies.refresh_token) {\r\n        setAuthorized(false);\r\n      } else {\r\n        axios.post(\"/refresh_token\", {\r\n          refresh_token: cookies.refresh_token,\r\n        });\r\n        setAuthorized(true);\r\n        if (cookies.access_token) {\r\n          const initialData = await axios.get(\"/spotify/me\");\r\n          setUser(initialData?.data?.user);\r\n          setPlaylists(initialData?.data?.playlists);\r\n          dispatch({\r\n            type: \"SET_CURRENT_PLAYLIST\",\r\n            current_playlist: initialData?.data.current_playlist,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    checkAuth();\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n    <>\r\n      {authorized === false ? (\r\n        <Login />\r\n      ) : (\r\n        <>  \r\n          <div className=\"app\">\r\n            <Header user={user} />\r\n            <Sidebar playlists={playlists} />\r\n            <Switch>\r\n              <Route path=\"/\" exact component={Body} />\r\n              <Route path=\"/search\" exact component={Search} />\r\n              </Switch>\r\n            <Footer />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const DataLayerContext = createContext();\r\n\r\nexport const DataLayer = ({ initialState, reducer, children }) => (\r\n  <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </DataLayerContext.Provider>\r\n);\r\n\r\nexport const useDataLayerValue = () => useContext(DataLayerContext);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { DataLayer } from \"./contexts/DataLayer\";\r\nimport { StateProvider } from './store.js';\r\nimport { CookiesProvider } from \"react-cookie\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider>\r\n      <CookiesProvider>\r\n        <App />\r\n      </CookiesProvider>\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}