{"version":3,"sources":["store.js","utils/spotifySingleton.js","components/SongRow/index.js","components/Body/index.js","views/Login/index.js","components/Searchbar/index.js","components/SidebarOption.js/index.js","components/Header/index.js","components/Sidebar/index.js","components/Footer/index.js","views/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","current_playlist","currently_playing","spotify","is_playing","index","search_data","is_loading","authorized","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","dispatch","value","this","audio","Audio","track","SpotifyInstance","instance","src","preview_url","play","pause","vol","volume","SongRow","trackParams","globalState","useContext","useState","infoState","setInfoState","React","anchorEl","setAnchorEl","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","Grid","container","className","direction","item","sm","md","spacing","IconButton","onClick","album","images","url","alt","name","artists","map","artist","join","Hidden","smDown","xs","release_date","duration_ms","mdUp","event","currentTarget","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Body","alignItems","tracks","items","i","playSong","key","justify","CircularProgress","Login","href","Searchbar","input","setInput","history","useHistory","error","setError","e","a","preventDefault","axios","get","data","push","messaage","onSubmit","placeholder","onChange","target","SidebarOption","title","Icon","getPlaylist","id","handleGetPlaylist","Header","user","playlists","setOpen","Button","Drawer","anchor","to","playlist","list","display_name","Sidebar","then","Footer","setVolume","playPause","playFirstSong","firstSong","aria-label","window","location","indexOf","Slider","newVolume","aria-labelledby","Search","App","setUser","setPlaylists","loading","setLoading","params","message","useEffect","status","initialData","checkAuth","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.527ae501.chunk.js","sourcesContent":["// store.js\r\nimport React, { createContext, useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  current_playlist: [],\r\n  currently_playing: null,\r\n  spotify: null,\r\n  is_playing: false,\r\n  index: null,\r\n  search_data: [],\r\n  is_loading: false,\r\n  authorized: false\r\n};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case \"SET_CURRENT_PLAYLIST\":\r\n        return {\r\n          ...state,\r\n          current_playlist: action.current_playlist,\r\n        };\r\n      case \"SET_CURRENTLY_PLAYING\":\r\n        return {\r\n          ...state,\r\n          currently_playing: action.currently_playing,\r\n        };\r\n      case \"SET_SPOTIFY\":\r\n        return {\r\n          ...state,\r\n          spotify: action.spotify,\r\n        };\r\n      case \"SET_IS_PLAYING\":\r\n        return {\r\n          ...state,\r\n          is_playing: action.is_playing,\r\n        };\r\n      case \"SET_CURRENT_INDEX\":\r\n        return {\r\n          ...state,\r\n          index: action.index,\r\n        };\r\n\r\n      case \"SET_SEARCH_DATA\":\r\n        return {\r\n          ...state,\r\n          search_data: action.search_data,\r\n        };\r\n        case \"SET_AUTHORIZED\":\r\n          return {\r\n            ...state,\r\n            authorized: action.authorized,\r\n          };\r\n\r\n      case \"SET_IS_LOADING\":\r\n        return {\r\n          ...state,\r\n          is_loading: action.is_loading,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider };\r\n","\r\n// Created a singleton to control audio state throughout components\r\nclass SpotifyInstance {\r\n  constructor() {\r\n    this.audio = new Audio();\r\n    this.track = null;\r\n\r\n    // Whrn this class is called it check if the spotify instance exists, if it does it returns the same one.\r\n    if (SpotifyInstance.instance == null) {\r\n      SpotifyInstance.instance = this;\r\n    }\r\n    return SpotifyInstance.instance;\r\n  }\r\n\r\n  play(track) {\r\n    this.audio.src = track.preview_url;\r\n    this.audio.play();\r\n    this.audio.is_playing = true;\r\n  }\r\n\r\n  pause() {\r\n    this.audio.pause();\r\n    this.audio[\"is_playing\"] = false;\r\n  }\r\n\r\n  setVolume(vol) {\r\n    this.audio.volume = vol / 100;\r\n  }\r\n}\r\n\r\nconst spotify = new SpotifyInstance();\r\nexport default spotify;\r\n","import React, { useContext, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport { store } from \"../../store.js\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport spotify from \"../../utils/spotifySingleton\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\n\r\nfunction SongRow({ track, index }) {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n  const [infoState, setInfoState] = useState(() => false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const play = (trackParams) => {\r\n    spotify.play(trackParams);\r\n\r\n    // Dispatch currently playings for other components to consume & to update ui.\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: true,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENTLY_PLAYING\",\r\n      currently_playing: trackParams,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: index,\r\n    });\r\n  };\r\n\r\n  const pause = () => {\r\n    spotify.pause();\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: false,\r\n    });\r\n  };\r\n\r\n  // Used to convert time\r\n  const millisToMinutesAndSeconds = (millis) => {\r\n    var minutes = Math.floor(millis / 60000);\r\n    var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n  };\r\n\r\n  // Renders pause Button. Checks if audio is playing and from the list of\r\n  // songs, it matches the current audio to the preview url.\r\n  const playPauseButton = (trackParams) => {\r\n    if (\r\n      globalState.state.is_playing === true &&\r\n      trackParams?.preview_url === spotify.audio.src\r\n    ) {\r\n      return (\r\n        <IconButton onClick={() => pause()}>\r\n          <PauseIcon />\r\n        </IconButton>\r\n      );\r\n    } else {\r\n      return (\r\n        <IconButton onClick={() => play(trackParams)}>\r\n          <PlayArrowIcon />\r\n        </IconButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleInfoState = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setInfoState(true);\r\n  };\r\n\r\n  return (\r\n    <Grid container className=\"songRow\" direction=\"row\">\r\n      <Grid item sm={6} md={4}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>{playPauseButton(track)}</Grid>\r\n          <Grid item>\r\n            <img\r\n              className=\"songRow__album\"\r\n              src={track?.album.images[0].url}\r\n              alt=\"\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <div className=\"songRow__info\">\r\n              <h1>{track?.name}</h1>\r\n              <p>{track?.artists.map((artist) => artist.name).join(\", \")} - </p>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Hidden smDown={true}>\r\n        <Grid item xs={3}>\r\n          {track?.album.name}\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          {track?.album.release_date}\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {millisToMinutesAndSeconds(track?.duration_ms)}\r\n        </Grid>\r\n      </Hidden>\r\n\r\n      {/* Extra info is added in a popover on moible */}\r\n      <Hidden mdUp={true}>\r\n        <Grid item xs={3}>\r\n          <IconButton onClick={handleInfoState}>\r\n            <MoreHorizIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </Hidden>\r\n      <Popover\r\n        open={infoState}\r\n        anchorEl={anchorEl}\r\n        className=\"songRow__popOver\"\r\n        onClose={() => setInfoState(false)}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n      >\r\n        {\" \"}\r\n        <Grid item xs={12}>\r\n          Release Date - {track?.album.release_date}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n            Time - {millisToMinutesAndSeconds(track?.duration_ms)}\r\n        </Grid>\r\n      </Popover>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default SongRow;\r\n","import React, { useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport SongRow from \"../SongRow\";\r\nimport { store } from \"../../store.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nfunction Body() {\r\n  const globalState = useContext(store);\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"body__info\">\r\n        <div className=\"body__infoText\">\r\n          <strong>PLAYLIST</strong>\r\n          <h2>{globalState.state.current_playlist?.name}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"body__songs\">\r\n        {globalState.state.is_loading === false ? (\r\n          <>\r\n            <div className=\"body__icons\">\r\n            </div>\r\n            <Grid container alignItems=\"center\">\r\n              <Grid item xs={4} md={4}>\r\n                Title\r\n              </Grid>\r\n              <Hidden smDown={true}>\r\n                <Grid item md={3}>\r\n                  Artist\r\n                </Grid>\r\n              </Hidden>\r\n              <Hidden smDown={true}>\r\n              <Grid item xs={3}>\r\n                Release Date\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                Time\r\n              </Grid>\r\n              </Hidden>\r\n            </Grid>\r\n            {globalState.state.current_playlist?.tracks?.items.map(\r\n              (item, i) => (\r\n                <SongRow track={item.track} playSong key={i} index={i} />\r\n              )\r\n            )}\r\n          </>\r\n        ) : (\r\n\r\n          // Added Loader if body songs take a while to load\r\n          <Grid container justify=\"center\">\r\n            <CircularProgress />\r\n          </Grid>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nconst DEBUG = process.env.NODE_ENV === \"development\";\r\nfunction Login() {\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img\r\n          src=\"https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_White.png\"\r\n          alt=\"logo\"\r\n        />\r\n        {/* // Spotify Logo\r\n            \r\n            // Login Button */}\r\n        <a href={ DEBUG ? 'http://localhost:5000/login' : 'https://spotify-app-edward-lanto.herokuapp.com/login'}>Login with Spotify</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState, useContext } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./index.css\";\r\nimport { store } from \"../../store.js\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Searchbar() {\r\n  const globalStore = useContext(store);\r\n  const { dispatch } = globalStore;\r\n  const [input, setInput] = useState(() => \"\");\r\n  const history = useHistory();\r\n  const [error, setError] = useState(() => []);\r\n\r\n  async function searchSpotify(e) {\r\n    try {\r\n      e.preventDefault();\r\n      const data = await axios.get(`/spotify/search?q=${input}`);\r\n\r\n      dispatch({\r\n        type: \"SET_SEARCH_DATA\",\r\n        search_data: data,\r\n      });\r\n\r\n      history.push(\"/search\");\r\n    } catch (err) {\r\n      setError(err.messaage)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={searchSpotify} className=\"searchBar\">\r\n      <SearchIcon />\r\n      <input\r\n        className=\"input-with-icon-adornment\"\r\n        placeholder=\"Search by track or name\"\r\n        onChange={(e) => setInput(e.target.value)}\r\n      />\r\n      {error}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction SidebarOption({ title, Icon, getPlaylist, id }){\r\n    const history = useHistory();\r\n    const handleGetPlaylist = (id) => {\r\n        history.push('/')\r\n        getPlaylist(id)\r\n    }\r\n\r\n    return (    \r\n    <div className=\"sidebarOption\">\r\n        {Icon && <Icon className=\"sidebarOption__icon\" />}\r\n        {title &&  <button type=\"button\" onClick={() => handleGetPlaylist(id)}><h4>{title}</h4></button> }\r\n    </div>)\r\n\r\n}\r\n\r\nexport default SidebarOption;","import React, { useState } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Searchbar from \"../../components/Searchbar\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SidebarOption from \"../SidebarOption.js\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nfunction Header({ user, playlists, getPlaylist }) {\r\n  const [open, setOpen] = useState(() => false);\r\n  const list = () => (\r\n    <div className=\"sidebar__mobileMenu\">\r\n      <div className=\"sidebar sidebar__desktop\">\r\n        <div className=\"sidebar__top\">\r\n        <img\r\n            src=\"https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png\"\r\n            alt=\"logo\"\r\n            className=\"sidebar__logo\"\r\n          />\r\n          <Link to=\"/\">\r\n            <HomeIcon />\r\n            <h4>Home</h4>\r\n          </Link>\r\n          <Searchbar />\r\n          <button type=\"button\">\r\n            <LibraryMusicIcon />\r\n            <h4>Your Library</h4>\r\n          </button>\r\n        </div>\r\n        <strong className=\"sidebar__title\">Playlists</strong>\r\n        <hr />\r\n        {playlists?.items?.map((playlist) => {\r\n          return (\r\n            <SidebarOption\r\n              title={playlist.name}\r\n              key={playlist.name}\r\n              getPlaylist={getPlaylist}\r\n              id={playlist.id}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Grid container justify=\"space-between\" className=\"header\" alignItems=\"center\">\r\n      <Grid item xs={8} sm={6}>\r\n        <Grid container direction=\"row\" alignItems=\"center\">\r\n          <Hidden mdUp={true}>\r\n            <Button onClick={() => setOpen(true)} className=\"header__menuButton\">\r\n              {open  === false ? <MenuIcon /> : <ClearIcon />}\r\n            </Button>\r\n            <Drawer anchor=\"left\" open={open} onClose={() => setOpen(false)}>\r\n              {list()}\r\n            </Drawer>\r\n          </Hidden>\r\n          <img\r\n            src=\"https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png\"\r\n            alt=\"logo\"\r\n            className=\"header__logo\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item className=\"header__right\">\r\n        <h4>{user?.display_name}</h4>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport SidebarOption from \"../SidebarOption.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Searchbar from \"../../components/Searchbar\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport axios from 'axios';\r\nimport { store } from \"../../store\";\r\n\r\nfunction Sidebar({ playlists, getPlaylist }) {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n  const logout = () => {\r\n    axios.get(`/logout`).then(() => {\r\n      dispatch({\r\n        type:\"SET_AUTHORIZED\",\r\n        authorized: false\r\n      });\r\n    });\r\n  }\r\n\r\n  return (\r\n    // Desktop Sidebar\r\n    <Hidden smDown={true}>\r\n      <div className=\"sidebar sidebar__desktop\">\r\n        <div className=\"sidebar__top\">\r\n          <Link to=\"/\">\r\n            <HomeIcon />\r\n            <h4>Home</h4>\r\n          </Link>\r\n          <Searchbar />\r\n        </div>\r\n        <strong className=\"sidebar__title\">Playlists</strong>\r\n        <hr />\r\n        {playlists?.items?.map((playlist) => {\r\n            return (\r\n              <SidebarOption\r\n                title={playlist.name}\r\n                key={playlist.name}\r\n                getPlaylist={getPlaylist}\r\n                id={playlist.id}\r\n              />\r\n            );\r\n          })}\r\n              <div className=\"sidebarOption\">\r\n        {<ExitToAppIcon className=\"sidebarOption__icon\" />}\r\n        {<button type=\"button\" onClick={() => logout()}><h4>Logout</h4></button> }\r\n    </div>\r\n      </div>\r\n    </Hidden>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useContext, useState } from \"react\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport VolumeDown from \"@material-ui/icons/VolumeDown\";\r\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\r\nimport { store } from \"../../store.js\";\r\nimport \"./index.css\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport spotify from \"../../utils/spotifySingleton\";\r\n\r\nfunction Footer() {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n  const [volume, setVolume] = useState(50);\r\n  const handleChange = (event, newVolume) => {\r\n    spotify.setVolume(newVolume);\r\n    setVolume(newVolume);\r\n  };\r\n\r\n  const skipNext = () => {\r\n\r\n    // Checks if audio is playing from search page and plays next song based on the body view or search view.\r\n    if (window.location.href.indexOf(\"search\") > -1) {\r\n      spotify.play(globalState.state.search_data.data.tracks[globalState.state.index + 1]);\r\n    } else {\r\n      if (globalState.state.index === null) {\r\n\r\n        // If there is no current song playing, it will automatically pull the first song\r\n        playFirstSong();\r\n      } else {\r\n        spotify.play(\r\n          globalState.state.current_playlist.tracks.items[\r\n            globalState.state.index + 1\r\n          ].track\r\n        );\r\n\r\n        dispatch({\r\n          type: \"SET_CURRENTLY_PLAYING\",\r\n          currently_playing:\r\n            globalState.state.current_playlist.tracks.items[\r\n              globalState.state.index + 1\r\n            ].track,\r\n        });\r\n      }\r\n    }\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: globalState.state.index + 1,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: true\r\n    });\r\n\r\n  };\r\n\r\n  const skipPrevious = () => {\r\n\r\n    // Goes to previous song on playlist and checks if page route on search to play appropriate list\r\n    if (window.location.href.indexOf(\"search\") > -1) {\r\n      spotify.play(globalState.state.search_data.data.tracks[globalState.state.index - 1]);\r\n    } else {\r\n      if (globalState.state.index === null || globalState.state.index === 0) {\r\n        playFirstSong();\r\n      } else {\r\n        spotify.play(\r\n          globalState.state.current_playlist.tracks.items[\r\n            globalState.state.index - 1\r\n          ].track\r\n        );\r\n\r\n        dispatch({\r\n          type: \"SET_CURRENTLY_PLAYING\",\r\n          currently_playing:\r\n            globalState.state.current_playlist.tracks.items[\r\n              globalState.state.index - 1\r\n            ].track,\r\n        });\r\n\r\n        dispatch({\r\n          type: \"SET_IS_PLAYING\",\r\n          is_playing: true\r\n        });\r\n      }\r\n    }\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: globalState.state.index - 1,\r\n    });\r\n  };\r\n\r\n  const playPause = () => {\r\n\r\n\r\n    if (globalState.state.currently_playing === null) {\r\n      playFirstSong();\r\n    } else if (\r\n      globalState.state?.is_playing === false &&\r\n      globalState.state?.currently_playing\r\n    ) {\r\n      spotify.audio.play();\r\n      dispatch({\r\n        type: \"SET_IS_PLAYING\",\r\n        is_playing: true,\r\n      });\r\n    } else {\r\n      spotify.audio.pause();\r\n      dispatch({\r\n        type: \"SET_IS_PLAYING\",\r\n        is_playing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const playButton = () => {\r\n    if (globalState.state.is_playing === true) {\r\n      return (\r\n        <IconButton aria-label=\"pause\" onClick={playPause}>\r\n          <PauseIcon />\r\n        </IconButton>\r\n      );\r\n    } else {\r\n      return (\r\n        <IconButton aria-label=\"play\" onClick={playPause}>\r\n          <PlayCircleOutlineIcon />\r\n        </IconButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  // Plays first in playlist if no song is already available\r\n  const playFirstSong = () => {\r\n    const firstSong = globalState.state.current_playlist.tracks.items[0].track;\r\n    spotify.play(firstSong);\r\n\r\n    dispatch({\r\n      type: \"SET_IS_PLAYING\",\r\n      is_playing: true,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENTLY_PLAYING\",\r\n      currently_playing: firstSong,\r\n    });\r\n\r\n    // If first song is chosen, set index to 0 and set to keep track for prev & next functions.\r\n    dispatch({\r\n      type: \"SET_CURRENT_INDEX\",\r\n      index: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <Grid container spacing={1}>\r\n\r\n        {/* Conditional  */}\r\n        {globalState.state.currently_playing ?\r\n        <Grid item xs={12} sm={4} md={3}>\r\n        <Grid container direction=\"row\" alignItems=\"center\">\r\n          <Grid item xs={12} sm={2}>\r\n          <img\r\n            className=\"footer__album\"\r\n            src={globalState.state.currently_playing?.album?.images[0].url}\r\n            alt=\"\"\r\n          />\r\n          </Grid>\r\n          <Grid item xs={12} sm={9} className=\"songRow__infoContainer\">\r\n          <div className=\"songRow__info\">\r\n            <h6>{globalState.state.currently_playing?.name}</h6>\r\n            <div>\r\n              <p>\r\n                {globalState.state.currently_playing?.artists\r\n                  .map((artist) => artist?.name)\r\n                  .join(\", \")}{\" \"}\r\n                -{\" \"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      : <Grid item xs={12} sm={4} md={3} className=\"footer__songLoader\">Please play a song</Grid>}\r\n        <Grid item xs={12} sm={4} md={6}>\r\n          <Grid container direction=\"row\" justify=\"center\">\r\n            <IconButton aria-label=\"previous\" onClick={skipPrevious}>\r\n              <SkipPreviousIcon />\r\n            </IconButton>\r\n            {playButton()}\r\n            <IconButton aria-label=\"next\" onClick={skipNext}>\r\n              <SkipNextIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={3}>\r\n          <Grid container spacing={1} className=\"footer__sliderContainer\" alignItems=\"center\">\r\n            <Grid item>\r\n              <VolumeDown />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Slider\r\n                value={volume}\r\n                onChange={handleChange}\r\n                aria-labelledby=\"continuous-slider\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <VolumeUp />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useContext } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { store } from \"../../store\";\r\nimport SongRow from \"../../components/SongRow\";\r\nimport \"./index.css\";\r\n\r\nfunction Search() {\r\n  const globalState = useContext(store);\r\n  return (\r\n    <div className=\"searchPage\">\r\n      <div className=\"searchPage__infoText\">\r\n        <h2>Search Results</h2>\r\n      </div>\r\n      {globalState.state.search_data?.data?.tracks ? (\r\n        <>\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Grid item xs={4}>\r\n              Title\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              Artist\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              Release Date\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              Time\r\n            </Grid>\r\n          </Grid>\r\n          <div>\r\n            {globalState.state.search_data?.data?.tracks.map((track, i) => (\r\n              <SongRow track={track} playSong key={i} index={i} />\r\n            ))}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div>There are no search results, please provide a search query.</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport Body from \"./components/Body\";\r\nimport \"./index.css\";\r\nimport Login from \"./views/Login\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Footer from \"./components/Footer\";\r\nimport PageNotFound from \"./components/PageNotFound\";\r\nimport Search from \"./views/Search\";\r\nimport axios from \"axios\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { store } from \"./store\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const globalState = useContext(store);\r\n  const [user, setUser] = useState({});\r\n  const [playlists, setPlaylists] = useState(() => []);\r\n  const { dispatch } = globalState;\r\n  const [error, setError] = useState(() => \"\");\r\n  const [loading, setLoading] = useState(true);\r\n  async function getPlaylist(id) {\r\n    try {\r\n\r\n      dispatch({\r\n        type: \"SET_IS_LOADING\",\r\n        is_loading: true,\r\n      });\r\n\r\n      const data = await axios.get(\"/spotify/get_playlist\", {\r\n        params: {\r\n          id,\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_CURRENT_PLAYLIST\",\r\n        current_playlist: data.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_IS_LOADING\",\r\n        is_loading: false,\r\n      });\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const valid = await axios.get(\"/refresh_token\");\r\n        if(valid.status === 200){\r\n          const initialData = await axios.get(\"/spotify/me\");\r\n          setUser(initialData?.data?.user);\r\n          setPlaylists(initialData?.data?.playlists);\r\n  \r\n          dispatch({\r\n            type: \"SET_CURRENT_PLAYLIST\",\r\n            current_playlist: initialData?.data.current_playlist,\r\n          });\r\n\r\n          dispatch({\r\n            type: \"SET_AUTHORIZED\",\r\n            authorized: true\r\n          });\r\n\r\n        }\r\n      } catch (err) {\r\n\r\n        dispatch({\r\n          type: \"SET_AUTHORIZED\",\r\n          authorized: false\r\n        });\r\n\r\n        // setAuthorized(false);\r\n        setError(err.message)\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    checkAuth();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Router>\r\n      <>\r\n        {loading === true && (\r\n          <Grid container justify=\"center\" className=\"app__loader\">\r\n            <CircularProgress />\r\n          </Grid>\r\n        )}\r\n        {globalState.state.authorized === false ? (\r\n          <Login />\r\n        ) : (\r\n          <>\r\n            <div className=\"app\">\r\n              <Header\r\n                user={user}\r\n                playlists={playlists}\r\n                getPlaylist={getPlaylist}\r\n              />\r\n              <Sidebar playlists={playlists} getPlaylist={getPlaylist} />\r\n              <Switch>\r\n                <Route path=\"/\" exact component={Body} />\r\n                <Route path=\"/search\" exact component={Search} />\r\n              </Switch>\r\n              <Footer />\r\n              {error && error}\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from './store.js';\r\nimport { CookiesProvider } from \"react-cookie\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider>\r\n      <CookiesProvider>\r\n        <App />\r\n      </CookiesProvider>\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}